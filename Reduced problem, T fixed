#p(T)=theta, T fixed

from gekko import GEKKO
import numpy as np
import matplotlib.pyplot as plt  
import scipy.integrate as integrate

# initialize gekko
m = GEKKO()

#Parameters
b10=1.
b20=0.9
d1=0.27
d2=0.3
K=1.
sh=0.9
theta=(1/sh)*(1-((d1*b20)/(d2*b10)))
M=10.
T=0.5
eps=0.01

#C_theta=integrate.quad(lambda x: M/(f(x)+M*g(x)), 0, theta)
#print(C_theta)

#Discretization of the problem
nt = 301
m.time = np.linspace(0,T,nt)

#Functions
def f(p):
    return p*(1-p)*((d1*b20-d2*b10*(1-sh*p))/(b10*(1-p)*(1-sh*p)+b20*p))

def g(p):
    return (1/K)*((b10*(1-p)*(1-sh*p))/(b10*(1-p)*(1-sh*p)+b20*p))

#M*np.concatenate((np.ones(20),np.zeros(80)),axis=0)  

# Variables
J = m.Var(value=0.)
p = m.Var(value=0.)
u = m.MV(value=M , lb=0. , ub=M)
u.STATUS = 1
#u.DCOST = 0.  #Default=0.00001
#z = m.Var(value=0., lb=0)
finalpoint = np.zeros(nt) # mark final time point
finalpoint[-1] = 1.0
final = m.Param(value=finalpoint)

# Equations
m.Equation(p.dt()==f(p)+u*g(p))
m.Equation(J.dt()==u)
m.Equation(p*final<=theta)
m.Obj(J*final-(1./eps)*p*final) # Objective function


#Solver
m.options.IMODE = 6 # optimal control mode
m.options.NODES = 4
m.options.MV_TYPE = 1
m.options.SOLVER = 3
m.options.OTOL = 0.1
m.solver_options = ['max_iter 6000']
m.solve(disp=False) # solve

#Plots and results

print("Final state=",p.value[-1])
print("Cost=",J.value[-1])
print("Cost+(1/eps)(theta-p(T))^2=",J.value[-1]+(1./eps)*min(p.value[-1]-theta,0)**2)


fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5)) 
ax1.plot(m.time,u.value,'r--',label=r'$u$')
ax2.plot(m.time,p.value,'b-',label=r'$p$')
ax1.legend(loc='best')
ax1.set_xlabel('Time')
ax2.legend(loc='best')
ax2.set_xlabel('Time')
#plt.savefig('1DTfixed.png', bbox_inches='tight')
plt.show()
